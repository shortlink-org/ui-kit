include:
  - local: .gitlab/ci/workflows/matrix_build_npm.yml
  - local: .gitlab/ci/templates/cache.yml

npm_publish:
  stage: publish
  image: node:24-alpine

  variables:
    PACKAGE_PATH: "${PACKAGE_PATH:-.}"
    NPM_CONFIG_PROVENANCE: "false"          # GitLab registry is private

  before_script:
    # ----- 1. write a minimal ~/.npmrc ---------------------------------
    - |
      REG="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
      cat > ~/.npmrc <<EOF
      @${CI_PROJECT_ROOT_NAMESPACE}:registry=$REG
      //$CI_SERVER_HOST/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=$CI_JOB_TOKEN
      always-auth=true
      EOF
      export NODE_AUTH_TOKEN="$CI_JOB_TOKEN"            # npm ‚â•9 picks this up :contentReference[oaicite:4]{index=4}

    # ----- 2. toolchain -------------------------------------------------
    - corepack enable && corepack prepare pnpm@latest --activate
    - cd "$PACKAGE_PATH"

  script: |
    set -e

    ############################################################
    # 1. decide VERSION & DIST_TAG (semver tag vs main branch)
    ############################################################
    if printf '%s' "$CI_COMMIT_TAG" | grep -Eq '^v?[0-9]+\.[0-9]+\.[0-9]+(-.*)?$'; then
      VERSION="${CI_COMMIT_TAG#v}"
      DIST_TAG="latest"
    elif [ "$CI_COMMIT_BRANCH" = "main" ]; then
      VERSION="0.$(date -u +%Y%m%d).$(date -u +%H%M%S)"   # numeric ‚Üí valid SemVer :contentReference[oaicite:5]{index=5}
      DIST_TAG="canary"
    else
      echo "‚è©  skip publish (neither tag nor main)"; exit 0
    fi
    echo "üì¶  ${VERSION}  (tag: ${DIST_TAG})"

    ############################################################
    # 2. skip if version already exists in GitLab registry
    ############################################################
    PKG=$(npm pkg get name --workspaces=false | tr -d '"')
    REG="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
    if npm view "${PKG}@${VERSION}" --registry "$REG" >/dev/null 2>&1; then
      echo "‚úîÔ∏è  ${PKG}@${VERSION} already published"; exit 0
    fi

    ############################################################
    # 3. build (tsc / vite need node_modules)
    ############################################################
    pnpm install --frozen-lockfile
    pnpm version --no-git-tag-version "$VERSION"
    pnpm run build

    ############################################################
    # 4. publish ‚Äì provenance off, registry explicit
    ############################################################
    npm publish --no-provenance \
      --registry "$REG" \
      --tag "$DIST_TAG" \
      --ignore-scripts

  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - when: never

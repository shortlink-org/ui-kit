npm:
  stage: publish
  image: node:24-alpine

  variables:
    NPM_TOKEN: "$CI_JOB_TOKEN"
    PACKAGE_PATH: "${PACKAGE_PATH:-.}"
    # turn on provenance
    NPM_CONFIG_PROVENANCE: "false"

  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore

  before_script:
    # Auth for the project-scoped registry
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" > .npmrc
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:always-auth=true"        >> .npmrc
    - export NODE_AUTH_TOKEN="$CI_JOB_TOKEN"
    # pnpm
    - corepack enable && corepack prepare pnpm@latest --activate
    - cd "$PACKAGE_PATH"

  script:
  - |
    set -e

    ############################################################
    # 0. Auth & global npm config  (no per-registry always-auth)
    ############################################################
    echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}"  > ~/.npmrc
    echo "always-auth=true"                                                                          >> ~/.npmrc   # global key ‚úî
    export NODE_AUTH_TOKEN="$CI_JOB_TOKEN"   # npm ‚â•9 respects this var

    ############################################################
    # 1. Choose VERSION + DIST_TAG  (SemVer tag vs main branch)
    ############################################################
    if [ -n "$CI_COMMIT_TAG" ] && echo "$CI_COMMIT_TAG" | grep -Eq '^v?[0-9]+\.[0-9]+\.[0-9]+(-.*)?$'; then
      VERSION="${CI_COMMIT_TAG#v}"          # strip leading v
      DIST_TAG="latest"
    elif [ "$CI_COMMIT_BRANCH" = "main" ]; then
      VERSION="0.$(date -u +%Y%m%d).$(date -u +%H%M%S)"   # 0.YYYYMMDD.HHMMSS  ‚Üí legal SemVer :contentReference[oaicite:3]{index=3}
      DIST_TAG="canary"
    else
      echo "‚è©  Not a release tag and not main ‚Äì skipping publish."; exit 0
    fi
    echo "üì¶  Candidate: $VERSION  (tag: $DIST_TAG)"

    ############################################################
    # 2. Skip if already in the registry
    ############################################################
    PKG_NAME=$(npm pkg get name --workspaces=false | tr -d '"')
    if npm view "${PKG_NAME}@${VERSION}" \
          --registry "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" >/dev/null 2>&1; then
      echo "‚úîÔ∏è  ${PKG_NAME}@${VERSION} already exists ‚Äì nothing to do."; exit 0
    fi

    ############################################################
    # 3. Build
    ############################################################
    pnpm install --frozen-lockfile                         # ensures tsc/vite exist
    pnpm version --no-git-tag-version "$VERSION"
    pnpm run build

    ############################################################
    # 4. Publish to GitLab registry  (NO provenance flag!)
    ############################################################
    npm publish --no-provenance \                          # explicit off ‚Üí avoids EUSAGE :contentReference[oaicite:4]{index=4}
      --registry "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" \
      --tag "$DIST_TAG" \
      --ignore-scripts

  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - when: never

include:
  - local: .gitlab/ci/workflows/matrix_build_npm.yml
  - local: .gitlab/ci/templates/cache.yml

npm:
  stage: publish
  image: node:24-alpine

  # --------------------------- variables ----------------------------
  variables:
    NPM_TOKEN: "$CI_JOB_TOKEN"
    # Allow overriding where the package.json lives
    PACKAGE_PATH: "${PACKAGE_PATH:-.}"
    NPM_CONFIG_PROVENANCE: "true"
    # Dist-tag to use when publishing a SHA build
    CANARY_TAG: "canary"

  # ------------------------ auth + tooling --------------------------
  before_script:
    # ‚Ü≥ Auth for GitLab package registry
    - printf "//%s/api/v4/projects/%s/packages/npm/:_authToken=%s\n" \
        "$CI_SERVER_HOST" "$CI_PROJECT_ID" "$CI_JOB_TOKEN" >> ~/.npmrc
    - echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" >> ~/.npmrc

    # ‚Ü≥ pnpm
    - corepack enable
    - corepack prepare pnpm@latest --activate

    # ‚Ü≥ move to the package
    - cd "$PACKAGE_PATH"


  # -------------------------- main logic ----------------------------
  script:
  - |
    set -e                           # stop on first real error
    # -----------------------------------------------------------
    # 1. Decide VERSION and DIST_TAG   (same logic as before)
    # -----------------------------------------------------------
    SEMVER_REGEX='^v\?[0-9]+\.[0-9]+\.[0-9]+(-.*)?$'

    if [ -n "$CI_COMMIT_TAG" ] && echo "$CI_COMMIT_TAG" | grep -Eq "$SEMVER_REGEX"; then
      VERSION=$(echo "$CI_COMMIT_TAG" | sed 's/^v//')
      DIST_TAG="latest"
    elif [ "$CI_COMMIT_BRANCH" = "main" ]; then
      VERSION="0.$(date -u '+%Y%m%d').$(date -u '+%H%M%S')"   # 0.YYYYMMDD.HHMMSS
      DIST_TAG="canary"
    else
      echo "‚è©  Not a SemVer tag and not main ‚Äì skipping publish."
      exit 0
    fi
    echo "üì¶  Candidate version: $VERSION (tag: $DIST_TAG)"

    # -----------------------------------------------------------
    # 2. Abort early if this version is already in the registry
    # -----------------------------------------------------------
    PACKAGE_NAME=$(npm pkg get name --workspaces=false | tr -d '"')
    if npm view "${PACKAGE_NAME}@${VERSION}" \
          --registry "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" >/dev/null 2>&1; then
      echo "‚úîÔ∏è  ${PACKAGE_NAME}@${VERSION} already exists ‚Äì nothing to do."
      exit 0
    fi

    # -----------------------------------------------------------
    # 3. Build & publish
    # -----------------------------------------------------------
    pnpm install --frozen-lockfile                 # tsc, vite, etc.
    pnpm version --no-git-tag-version "$VERSION"
    pnpm run build

    echo "üöÄ  Publishing ${PACKAGE_NAME}@${VERSION} ‚Ä¶"
    npm publish \
      --registry "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" \
      --scope=@shortlink-org \
      --access public \
      --tag "$DIST_TAG" \
      --ignore-scripts

  # Run only on tags or on main
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - when: never          # all other refs skip the job

  retry: 2
  allow_failure: false
